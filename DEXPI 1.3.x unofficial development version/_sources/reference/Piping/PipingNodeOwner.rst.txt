===============
PipingNodeOwner
===============

Overview
========

.. rubric:: Abstract class

An object that can have :doc:`PipingNodes </reference/Piping/PipingNode>`.

.. image:: PipingNodeOwner.*


.. rubric:: Subtypes

* :doc:`Nozzle </reference/Equipment/Nozzle>`

* :doc:`PipeOffPageConnector </reference/Piping/PipeOffPageConnector>`

* :doc:`PipingComponent </reference/Piping/PipingComponent>`

* :doc:`PropertyBreak </reference/Piping/PropertyBreak>`

.. rubric:: Attributes (composition)

+----------------------------------------------------------------------------+--------------+------------------------------------------------------------------------+
| Name                                                                       | Multiplicity | Type                                                                   |
+============================================================================+==============+========================================================================+
| :ref:`Nodes <dexpi-Piping-PipingNodeOwner-Nodes>`                          | \*           | :doc:`PipingNode </reference/Piping/PipingNode>`                       |
+----------------------------------------------------------------------------+--------------+------------------------------------------------------------------------+

.. admonition:: proteus

   Implementation is subclass-specific.

.. admonition:: example

   As :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>` is abstract, we consider :doc:`CheckValve </reference/Piping/CheckValve>` as an arbitrary concrete subclass.

   .. image:: /diagrams/diagram705.*


   .. admonition:: proteus-example
   
      
      .. code-block:: xml
      
        <PipingComponent
            ID="checkValve1"
            ComponentClass="CheckValve"
            ComponentClassURI="http://data.posccaesar.org/rdl/RDS292229" DOTS123="DOTS123">
          ...
        </PipingComponent>
      


.. _dexpi-Piping-PipingNodeOwner-Nodes:

Nodes
=====

.. rubric:: Attribute (composition)


The :doc:`PipingNodes </reference/Piping/PipingNode>` of the :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>`.

Multiplicity
    \*

Type
    :doc:`PipingNode </reference/Piping/PipingNode>`

Opposite multiplicity
    0..1

.. admonition:: proteus

   The attribute is implemented using the XML hierarchy of the Proteus file. However, the ``<Node>`` elements for :doc:`PipingNodes </reference/Piping/PipingNode>` are not children of the XML element for the :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>` itself; they are rather grouped in a single ``<ConnectionPoints>`` element that is placed in the XML element for the :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>`.

   Note that the first ``<Node>`` element in the ``<ConnectionPoints>`` cannot represent a :doc:`PipingNode </reference/Piping/PipingNode>`. In Proteus Schema, the first ``<Node>`` element corresponds to the :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>` itself. It is not relevant for DEXPI, but it must be present according to the Proteus Schema specification. It must not have a ``Type`` attribute.

   The further ``<Node>`` elements with ``Type="process"`` (cf. Proteus implementation of :doc:`PipingNode </reference/Piping/PipingNode>`\ ) represent the :ref:`Nodes <dexpi-Piping-PipingNodeOwner-Nodes>` of the :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>`.

   The following XML fragment shows the case of a :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>` (more specifically, a :doc:`PipingComponent </reference/Piping/PipingComponent>`\ ) that has one :doc:`PipingNode </reference/Piping/PipingNode>`:

   
   .. code-block:: xml
   
     <PipingComponent DOTS123="DOTS123">
       ...
       <ConnectionPoints NumPoints="4" DOTS123="DOTS123">
         <!-- first Node is never relevant for DEXPI -->
         <Node ID="nonRelevantNode">...</Node>
     
         <!-- this is a PipingNode because Type is "process" -->
         <Node ID="aPipingNode" Type="process">...</Node>      
     
         <!-- this is not a PipingNode because no Type is given -->
         <Node ID="someNode">...</Node>
     
         <!-- this is not a PipingNode because Type is not "process" -->
         <Node ID="someSignalNode" Type="signal">...</Node>
       </ConnectionPoints>
       ...
     </PipingComponent>
   

   In some cases, Proteus Schema uses the *index* of a ``<Node>`` element to refer to that ``<Node>``. The index is the zero-based number of the ``<Node>`` in the ``<ConnectionPoints>``. For example, in the XML fragment above, the index of the ``<Node>`` with ``ID="nonRelevantNode"`` is 0 and the index of the ``<Node>`` with ``ID="aPipingNode"`` is 1. These indices are an implementation detail of Proteus Schema, and they do not carry any additional semantics. The :ref:`Nodes <dexpi-Piping-PipingNodeOwner-Nodes>` attribute of :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>` is *not ordered*, i.e., a :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>` in DEXPI does not have a *first* or *second* :doc:`PipingNode </reference/Piping/PipingNode>`.

.. admonition:: example

   As the owner type :doc:`PipingNodeOwner </reference/Piping/PipingNodeOwner>` is abstract, we consider :doc:`CheckValve </reference/Piping/CheckValve>` as an arbitrary concrete subclass.

   .. image:: /diagrams/diagram706.*


   .. admonition:: proteus-example
   
      
      .. code-block:: xml
      
        <PipingComponent
            ID="checkValve1"
            ComponentClass="CheckValve"
            ComponentClassURI="http://data.posccaesar.org/rdl/RDS292229" DOTS123="DOTS123">
          ...
          <ConnectionPoints DOTS123="DOTS123">
            <Node ID="nonRelevantNode" />
            <Node ID="pipingNode1" Type="process">...</Node>
            ...
          </ConnectionPoints>
          ...
        </PipingComponent>
      

