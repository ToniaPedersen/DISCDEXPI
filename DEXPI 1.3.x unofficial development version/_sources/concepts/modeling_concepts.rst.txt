=================
Modeling Concepts
=================

This section is a technical introduction to the :doc:`DEXPI Information Model </reference/index>`.


Unified Modeling Language (UML)
===============================

The :doc:`DEXPI Information Model </reference/index>` is a class model in terms of the :ref:`Unified Modeling Language (UML) <dexpi-glossary-uml>`. Here, we give an informal overview on the UML concepts used in this specification and on their graphical notation. 

Types and Instances
-------------------

*A type specifies a set of allowed values known as the instances of the type* [`UML:7.5.3.1 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A235%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C398.5%2C0%5D>`_].

The graphical notation of all types used in DEXPI is a rectangle with the type's name in bold face. Depending on the type, the rectangle may contain additional information. An instance is represented by a rectangle with an underlined string that is composed of the instance's name (if any) and the name of the instance's type, separated by a colon. Depending on the type of the instance, additional information may be shown.

In DEXPI, two kinds of types are used: data types and classes.

Data types
~~~~~~~~~~

A data type differs from a class in that instances of a data type are *identified only by their value. All instances of a data type with the same value are considered to be equal instances* [`UML:10.2.3.1 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A694%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C171.9%2C0%5D>`_].

- An *enumeration* is a data type that is specified by a list of its values [`UML:10.2.3.3 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A697%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C646.6%2C0%5D>`_]. These values are called (enumeration) literals. They are identified by a name which must be unique within an enumeration.

  The graphical notation for an enumeration contains contains the keyword ``<<enumeration>>`` in the name compartment. There is a separate compartment with the names of the enumeration's literals.
  
  .. admonition:: example

     .. image:: /diagrams/diagram0.*


  
     The diagram shows the enumeration :doc:`PowerUnit </reference/PhysicalQuantities/PowerUnit>`. The enumeration contains three literals: :ref:`Kilowatt <dexpi-PhysicalQuantities-PowerUnit-Kilowatt>`, :ref:`Megawatt <dexpi-PhysicalQuantities-PowerUnit-Megawatt>`, and :ref:`Watt <dexpi-PhysicalQuantities-PowerUnit-Watt>`.

- A *primitive type* does not have any substructure (i.e., :ref:`attributes <dexpi-concept-attributes>`). Its meaning is defined outside UML [`UML:10.2.3.2 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A697%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C712.9%2C0%5D>`_].

  The graphical notation of a primitive data type contains the keyword ``<<primitive>>``. The notation for an instance includes a suitable representation of its value, e.g., a literal.

  .. admonition:: example
  
     .. image:: /diagrams/diagram1.*


  
     The diagram shows the primitive type :doc:`Double </reference/DataTypes/Double>`, a type for floating point numbers, and two instances: an anonymous instance with value 1.23 and an instance with name PI and value 3.14159.

- There are further data types in DEXPI that are not primitive types or enumerations. They are either :ref:`abstract <dexpi-concept-abstract-types>` base classes that implement :ref:`nullable types <dexpi-concept-nullable-type>`, or they are *structured data types*, i.e., they have :ref:`attributes <dexpi-concept-attributes>`.

  The graphical notation for these data types also contains the keyword ``<<dataType>>``, and it has a compartment for the data type's attributes, if applicable.

  .. admonition:: example

     .. image:: /diagrams/diagram2.*


     
     :doc:`Power </reference/PhysicalQuantities/Power>` is a structured data type with two attributes :ref:`Unit <dexpi-PhysicalQuantities-Power-Unit>` and :ref:`Value <dexpi-PhysicalQuantities-Power-Value>`. The types of the attributes are :doc:`PowerUnit </reference/PhysicalQuantities/PowerUnit>` (an enumeration) and :doc:`Double </reference/DataTypes/Double>`.
     
     power1 is an instance of :doc:`Power </reference/PhysicalQuantities/Power>`. The :ref:`Unit <dexpi-PhysicalQuantities-Power-Unit>` is `PowerUnit.Kilowatt`, and the :ref:`Value <dexpi-PhysicalQuantities-Power-Value>` 500.    
     
Classes
~~~~~~~

*The purpose of a class is to specify a classification of objects and to specify [their] features* [`UML:10.4.1 <https://www.omg.org/spec/UML/2.5.1/PDF>`_]. As the only features used in this specification are :ref:`attributes <dexpi-concept-attributes>`, classes are similar to structured data types. However, the identity of values of classes (which are conventionally called objects) is handled differently: two objects that belong to the same class and that have equal attribute values (e.g, two instances of :doc:`Nozzle </reference/Equipment/Nozzle>`, both with the :ref:`SubTagName <dexpi-Equipment-Nozzle-SubTagName>` ``N1`` and no value for all other attributes of :doc:`Nozzle </reference/Equipment/Nozzle>`) are not identical.


.. admonition:: example

   .. image:: /diagrams/diagram3.*



   :doc:`Burner </reference/Equipment/Burner>` is a class with an attribute :ref:`DesignPower <dexpi-Equipment-Burner-DesignPower>`. The value of this attribute for the instance burner1 is power1, i.e., a :doc:`Power </reference/PhysicalQuantities/Power>` of 100 kW.



Packages and Models
-------------------

*A package is a namespace for its members* [`UML:12.2.3.1 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A1005%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C173.3%2C0%5D>`_]. In DEXPI, we use packages as containers for related elements in order to structure the information model. The :doc:`DEXPI Information Model </reference/index>` consists of 11 packages. Some of them cover basic data types (e.g., :doc:`DataTypes </reference/DataTypes/index>` and :doc:`PhysicalQuantities </reference/PhysicalQuantities/index>`) while others contain classes to describe various aspects of a P\&ID (e.g., :doc:`Equipment </reference/Equipment/index>`, :doc:`Piping </reference/Piping/index>`, and :doc:`Instrumentation </reference/Instrumentation/index>`). The package :doc:`DexpiModel </reference/DexpiModel/index>` provides the class :doc:`DexpiModel </reference/DexpiModel/DexpiModel>`, the root of the :ref:`DEXPI composition-hierarchy <dexpi-concept-composition-hierarchy>`.

A *model* is a special kind of package that describes an entire system [`UML:12.2.3.11 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A1027%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C137.5%2C0%5D>`_]. Thus, the :doc:`DEXPI Information Model </reference/index>` itself is a model in terms of UML. The system that it describes is the engineering and layout information in P\&IDs.

Note that the names of all DEXPI data types and classes are unique. In consequence, data types and classes can be identified by their name, and it is not required to give a package name. 

.. admonition:: example

   There is only one class with name ``Tank``. It is not required to give the name of the owning package (``Equipment::Tank``) or even to give a fully qualified name (``Dexpi::Equipment::Tank``) in order to identify the class.

.. admonition:: technical

   Apart from the case described above, element names in DEXPI are not guaranteed to be unique if the named elements [`UML:7.4.3.2 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A214%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C593.2%2C0%5D>`_] are owned by different name spaces [`UML:7.4.3.1 <https://www.omg.org/spec/UML/2.5.1/PDF#%5B%7B%22num%22%3A211%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C121.5%2C176.2%2C0%5D>`_]. For example,
   
   - the package :doc:`Equipment </reference/Equipment/index>` contains the class :doc:`Equipment </reference/Equipment/Equipment>`;
   
   - both the class :doc:`Pump </reference/Equipment/Pump>` and the class :doc:`Compressor </reference/Equipment/Compressor>` have an attribute called ``DesignVolumeFlowRate``;
   
   - all enumerations in the :doc:`Enumerations </reference/Enumerations/index>` have an enumeration literal called ``NULL``.






















Patterns
========

.. _dexpi-concept-nullable-type:


.. _dexpi-concept-actual-value:


.. _dexpi-concept-null-value:



Null Values
-----------

For several data types, the DEXPI Information Model defines an explicit *null* value.

.. admonition:: example

  .. image:: /diagrams/diagram4.*



  The data type :doc:`NullablePower </reference/PhysicalQuantities/NullablePower>` has two subtypes: :doc:`Power </reference/PhysicalQuantities/Power>` is used to give an *actual* value with a mandatory numerical :ref:`Value <dexpi-PhysicalQuantities-Power-Value>` and a mandatory :ref:`Unit <dexpi-PhysicalQuantities-Power-Unit>`. :doc:`NullPower </reference/PhysicalQuantities/NullPower>` is the type of the *null* value :doc:`NULL_POWER </reference/PhysicalQuantities/NULL_POWER>`.

A *null* value for a data attribute indicates that in a certain information base (e.g., the information available in a P\&ID tool) the attribute is known ("declared"), but no value is available.

In contrast, *no* value for a data attribute indicates that in a certain information base, the attribute is not known ("not declared") - and in consequence, no value is available.

.. admonition:: example

  .. image:: /diagrams/diagram5.*



  The class :doc:`Burner </reference/Equipment/Burner>` has a data attribute :ref:`DesignPower <dexpi-Equipment-Burner-DesignPower>`. The type of the attribute is  :doc:`NullablePower </reference/PhysicalQuantities/NullablePower>`.

  - If an exporting tool supports the attribute (e.g., because the tool has been configured accordingly) and a value for the attribute is known (e.g., because the user has entered a value), the DEXPI export should contain the known value.

  - If an exporting tool supports the attribute, but no value for the attribute is known (e.g., because the user has never entered a value), the DEXPI export should contain the *null* value.

  - If an exporting tool does not support the attribute (e.g., because the tool has not been configured accordingly), the DEXPI export should contain no value.

